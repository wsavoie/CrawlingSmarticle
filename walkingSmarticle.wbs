Sub Main()
dim cc as integer
	dim L as double
	dim LW as double
	const W_SMART=.053 'width of center link in CM
	for cc = 1 to 1
		LW = 1.1
		'WM.RunScript "D:\wkMdl_scripts\sg32.wbs"
		'freq,numbodies,lparts (-1 = max_grains)
		'freq		=6%
		'numbods	=25%
		
		
		
		temp=CrawlingSim(W_SMART,LW,.021,.0032)
		Sleep 10000
		WM.ActiveDocument.Close
	next 
End Sub

REM Function CrawlingSim(freq as Integer, bodies as Integer, lp as boolean)]
'W_SMART is spine width, LW is aspect ratio,THICK1 is center link thickness, THICK2 is outer link thickness
Function CrawlingSim(W_SMART as double, LW as double, THICK1 as double, THICK2 as double)
'to get lparts (.*'semicolon')
'RME\1
		dim L_SMART as double
		L_SMART = LW*W_SMART
		
	dim H_UBOTT as double
	H_UBOTT=THICK1
	dim W_UBOTT as double
	W_UBOTT=W_SMART
	dim W_BARB	as double
	W_BARB	= THICK2				' barb width in cm
	const circle_mass = 1
	
	dim H_BARB as double
	H_BARB= L_SMART				' barb length in cm
		dim MOTORS_ON as boolean 
	MOTORS_ON = true
	
	dim lparts as boolean 
	lparts = false
	const SPRING_K				= .5		'spring k val
	const SPRING_B				= 0		'damping value
	const M_BARB				= .5

	REM const H_UBOTT	 			= 
	const M_CENTER				= .5		' UBott mass
	const M_OUTER				= .5
	Dim rndForce(1) as WMConstraint	   'random initial force
	const springsq_mass		=1
	
	'Key consts for sim
	const dens					= 25		' density of metal in particles
	const SHOW_DETAILS          = false  	' show springs, dampers, strings
	const SHOW_METERS         	= TRUE 	' show input and output meters
	const FRAMES 				= 600
	
	const SPF					= .05		'seconds per frame
	'UBott consts 	

	const FRICTION				= .3						'default was .3 for both static&kinetic
	const ELAST					= 0
	'barb consts

	
	const sweep 				= 30					' barb angle deflect from vertical
	const S_BARB				= .2					' barb sweep speed in cm/s
	dim CIRCLE_RAD as double
	CIRCLE_RAD	= W_BARB/2				' radius of circle on end of barbs
	
	'wall and arena size consts

	
	const W_GROUND				= 12					
	const THICK_ARENA 				= 4
	const M_WALL				= 1					' mass of wall
	const GRAVITY				= 9.81
	const circles 			= true


	dim RunNumber as INTEGER
	dim runTotal as INTEGER
	runTotal = 1	'total number of runs to do
	RunNumber = 1	'counter
	const EXPORT 			= 1
	
	
	'array declaration 
		REM dim spots(Arena_spots) as double
	'=======================Create Square Lattice =====================	

	'!@#$%^&*()(*&^%$#@GIVE ARENA INFO
	'msgbox("Arena_cols:"+LTrim$(str$(Arena_cols))+" Arena_rows:" + LTrim$(str$(Arena_rows)))
	
		
	'1-(2.5*H_BARB/w_Arena) 'will contract to 2.5*width of barbs
	dim wallPercent as double
	dim wall_move_distance as double
	
	REM if lparts then
		REM 'wallPercent 		= fix(3.2/24*1*1000)/1000 +.4
		REM wallPercent			= fix((1/Arena_rows)*.25*1000)/1000+.5
	REM else
		'wallPercent 		= fix(3.2/24*1*1000)/1000 +.3
		REM wallPercent			= fix((1/Arena_rows)*.25*1000)/1000+.3
	REM end if
	'msgbox(wallPercent)
	'============================Setup Document===========================  
	dim doc as WMdocument
	Dim BWall as WMBody
	Dim BWallpt as WMPoint						'wall points
	Dim LBarbCircle(1) as WMBody
	Dim LBarbCircleJt(1) as WMConstraint
	Dim RBarbCircle(1) as WMBody
	Dim RBarbCircleJt(1) as WMConstraint

	Dim LBarb(1) as WMBody
	Dim UBott(1)	as WMBody	'declare U body parts
	Dim LSpringSq(1) as WMBody

	Dim RBarb(1) as WMBody ';'
	Dim RSpringSq(1) as WMBody ';'
	Dim RSpring(1) as WMconstraint ';'
	Dim RMotor(1) as WMconstraint ';'		'motors


	
	Dim LSpring(1) as WMconstraint
	Dim LMotor(1) as WMconstraint

	
	set doc                 = WM.new()
	doc.unitsystem          = "si degrees"
	REM doc.scalefactor         = 1.5/(H_Arena*W_Arena) ' want screen body size at 0.08 m
		doc.scalefactor         = .5 ' want screen body size at 0.08 m
		
	doc.showcoordinates     = true ' false
	doc.showtapecontrol     = true ' false
	doc.showscrollbars      = true ' false
	REM doc.scrollto               W_Arena,-H_Arena/2
		doc.scrollto               0,0
	Doc.Gravity = "linear"
    Doc.LinearGravityConst=GRAVITY
	Doc.WarnInconsistent 	= false
	WinSize 498*Screen.TwipsPerPixelX, 148*Screen.TwipsPerPixelY   
	
	'===== rwall stagger consts
	Dim timestepMove(FRAMES) as Double
	dim VConstMoveFrames as Integer
	dim StepStart as integer
	dim stepD as integer
	'gosub make_frame_array
'=======================Create Arena Walls and Grabbers=====================
	gosub CreateWallsAndGrabbers
'=======================Create Bodies =====================	
	For j = 1 to 1
		Randomize
		rot = Random(0,360)
		'randomize location between lwall px, rWall px and wall height limit and 
	'==========declare bodies========
		Set LBarb(j) 				= Doc.NewBody("rectangle")
		Set UBott(j) 				= Doc.NewBody("rectangle")
		Set LSpringSq(j)			= Doc.NewBody("square")

		Set LSpring(j)				= Doc.NewConstraint("rspring")

		Set LMotor(j) 				= Doc.NewConstraint("motor")
		
		if not lparts then
			Set RBarb(j) 				= Doc.NewBody("rectangle") ';'
			Set RSpringSq(j)			= Doc.NewBody("square") ';'
			Set RSpring(j)				= Doc.NewConstraint("rspring") ';'
			Set RMotor(j)				= Doc.NewConstraint("motor") ';'
		end if
		
		if circles then
			Set LBarbCircle(j)			= Doc.NewBody("Circle")
			Set LBarbCircleJt(j)		= Doc.newconstraint("squarepin")
			Set RBarbCircleJt(j)		= Doc.newconstraint("squarepin")
			Set RBarbCircle(j)			= Doc.NewBody("Circle")
		end if
		
		
'=========turn of collisions for barbs and spring squares======
		'unselect all things
		Doc.selectall false
	
		'make left side stuff not collide
		Doc.select LBarb(j), true
		Doc.select LSpringSq(j), true
		Doc.select Ubott(j), true
		Doc.Collide false
		Doc.selectall false
	
		'make right side stuff not collide
		if not lparts then
			Doc.select RBarb(j), true ';'
			Doc.select RSpringSq(j), true ';'
		end if
		Doc.select Ubott(j), true
		Doc.Collide false
		Doc.selectall false
		
'======create barbs and springSquares=========
		Randomize
		'blen = Random(H_Barb-.25*h_barb,h_barb+.25*H_barb)
		B_LEN = H_BARB+.25*H_BARB*(rnd()-.5)*2
		'left barb
		LBarb(j).Height.Value 			= B_LEN'H_BARB 
		LBarb(j).Width.Value 			= W_BARB
		LBarb(j).name 					= "LBarb("+LTrim$(str$(j))+")"
		LBarb(j).mass.value				= M_BARB 
		LBarb(j).staticfriction.value	= FRICTION
		LBarb(j).kineticfriction.value	= FRICTION
		LBarb(j).elasticity.value		= ELAST
		
		'connecting UBott piece
		UBott(j).Height.Value 			= H_UBOTT
		'uBott(j).height.formula			= .2+time
		UBott(j).Width.Value 			= W_UBOTT
		UBott(j).name 					= "UBott("+LTrim$(str$(j))+")"
		UBott(j).mass.value				= M_BARB
		UBott(j).staticfriction.value	= FRICTION
		UBott(j).kineticfriction.value	= FRICTION
		UBott(j).elasticity.value		= ELAST
		'right barb
		if not lparts then
			RBarb(j).Height.Value 			= B_LEN'H_BARB   ';'
			RBarb(j).Width.Value 			= W_BARB ';'
			RBarb(j).name 					= "RBarb("+LTrim$(str$(j))+")" ';'
			RBarb(j).mass.value				= M_BARB ';'
			RBarb(j).staticfriction.value	= FRICTION ';'
			RBarb(j).kineticfriction.value	= FRICTION ';'
			RBarb(j).elasticity.value		= ELAST ';'
		end if
		'========Connect circles to barbs====================
		if circles then
			gosub ConnectLRBarbCircles
		end if		
		
		if not lparts then
			RBarb(j).Pr.value		= rot ';'
		end if
		UBott(j).Pr.value		= rot
		LBarb(j).Pr.value		= rot
'=========Spring Square creation===================
		'LSpringSq
		LSpringSq(j).height.value 			= W_BARB
		LSpringSq(j).name		  			= "LSpringSq("+LTrim$(str$(j))+")"
		LSpringSq(j).Pr.value				= rot
		LSpringSq(j).mass.value				= springsq_mass
		LSpringSq(j).staticfriction.value	= FRICTION
		LSpringSq(j).kineticfriction.value	= FRICTION
		LSpringSq(j).elasticity.value		= ELAST
		
		'RSpringSq
		if not lparts then
			RSpringSq(j).height.value 			= W_BARB ';'
			RSpringSq(j).name		  			= "RSpringSq("+LTrim$(str$(j))+")" ';'
			RSpringSq(j).Pr.value				= rot ';'
			RSpringSq(j).mass.value				= springsq_mass ';'
			RSpringSq(j).staticfriction.value	= FRICTION ';'
			RSpringSq(j).kineticfriction.value	= FRICTION ';'
			RSpringSq(j).elasticity.value		= ELAST ';'
		end if

'========Create Circles on end of staple barbs=======
		if circles then
			LBarbCircle(j).radius.value 		= CIRCLE_RAD
			LBarbCircle(j).name					= "LBarbCircle("+LTrim$(str$(j))+")" 
			LBarbCircle(j).mass.value			= circle_mass
			LBarbCircle(j).pr.value				= rot
			LBarbCircle(j).staticfriction.value	= FRICTION
			LBarbCircle(j).kineticfriction.value= FRICTION
			LBarbCircle(j).elasticity.value		= ELAST
			
			RBarbCircle(j).radius.value			= CIRCLE_RAD
			RBarbCircle(j).name					= "RBarbCircle("+LTrim$(str$(j))+")"
			RBarbCircle(j).mass.value			= circle_mass
			RBarbCircle(j).staticfriction.value	= FRICTION
			RBarbCircle(j).kineticfriction.value= FRICTION
			RBarbCircle(j).elasticity.value		= ELAST
			RBarbCircle(j).pr.value				= rot
		end if
		
'========initialize springs and motors params========
		'LSpring 
		LSpring(j).name					="LSpring("+LTrim$(str$(j))+")"
		LSpring(j).k.value				= SPRING_K	 'SPRING K
		LSpring(j).DamperK.value		= SPRING_B	 'SPRING K	
		LSpring(j).show					= SHOW_DETAILS
		'L motors
		LMotor(j).name 					= "LMotor("+LTrim$(str$(j))+")"
		LMotor(j).Motortype				="velocity"
		LMotor(j).show					= SHOW_DETAILS
		
		'RSpring
		if not lparts then
			RSpring(j).name					="RSpring("+LTrim$(str$(j))+")" ';'
			RSpring(j).k.value				= SPRING_K	 'SPRING K ';'
			RSpring(j).DamperK.value		= SPRING_B	 'SPRING K ';'
			RSpring(j).show					= SHOW_DETAILS ';'
			'R motors
			RMotor(j).name 					= "RMotor("+LTrim$(str$(j))+")" ';'
			RMotor(j).Motortype				="velocity" ';'
			RMotor(j).show					= SHOW_DETAILS ';'
		end if

'=========Set attachments of springs and motors=========
		'LSPRINGS AND LMOTORS
		Set LSpring(j).point(1).body 	= LBarb(j)
		Set LSpring(j).point(2).body 	= LSpringSq(j)
		LSpring(j).point(1).px.value 	= 0
		LSpring(j).point(1).py.value 	= -(LBarb(j).Height.Value-UBott(j).Height.Value)/2
		LSpring(j).point(2).px.value 	= 0
		LSpring(j).point(2).py.value	= 0
		
		Set LMotor(j).Point(1).Body 	= LSpringSq(j)
		Set LMotor(j).Point(2).Body 	= UBott(j)
		LMotor(j).Point(1).px.value		= 0
		LMotor(j).Point(1).py.value		= 0
		LMotor(j).Point(2).px.value		=(W_Barb-W_UBOTT)/2
		LMotor(j).Point(2).py.value		=0
		
		
		'RSPRINGS AND R MOTORS
		if not lparts then
			Set RSpring(j).point(1).body	= RBarb(j) ';'
			Set RSpring(j).point(2).body	= RSpringSq(j) ';'
					
			RSpring(j).point(1).px.value 	= 0 ';'
			RSpring(j).point(1).py.value 	= -(B_LEN-H_UBOTT)/2 ';'
			RSpring(j).point(2).px.value 	= 0 ';'
			RSpring(j).point(2).py.value	= 0 ';'
			
			Set RMotor(j).Point(1).Body		= RSpringSq(j) ';'
			Set RMotor(j).Point(2).Body		= UBott(j) ';'
			RMotor(j).Point(1).px.value		= 0 ';'
			RMotor(j).Point(1).py.value		= 0 ';'
			RMotor(j).Point(2).px.value		= -(W_Barb-W_UBOTT)/2 ';'
			RMotor(j).Point(2).py.value		= 0 ';'
			RSpring(j).rotation.value		= RSpring(j).currentrotation ';'
		end if
		LSpring(j).rotation.value		= LSpring(j).currentrotation
		 
'========give motors and initial random force==========
		'give barb motors force formula
		if MOTORS_ON then
			if not lparts then
				RMotor(j).Field.Formula = "cos(t*8+pi)*100" ';'
			end if
			LMotor(j).Field.Formula = "-cos(t*8+pi)*100"
		else
			if not lparts then
				RMotor(j).Field.Formula = "0" ';'
			end if
			LMotor(j).Field.Formula = "0"
		end if
				
		set rndForce(j) 				= Doc.newConstraint("Force")
		set rndForce(j).Point(1).body 	= UBott(j)
		
		rndForce(j).point(1).px.value 	= 0
		rndForce(j).point(1).py.value 	= 0
		rndForce(j).AlwaysActive		= True
	
		rndForce(j).fx.formula			= LTrim$(str$(Random(-5,5)))+"*(t<1)" 'gives initial random direction
		rndForce(j).fy.formula			= LTrim$(str$(Random(-5,5)))+"*(t<1)"
		'rndForce(j).fx.formula			= "-9.8" 'gives initial random direction
	

		rotrad = rot*pi/180
		
		UBott(j).px.value = (B_LEN-W_BARB)*sin(rotrad)/2
		UBott(j).py.value = BWall.height.value+.2 +(B_LEN-W_BARB)*cos(rotrad)/2
	
	
	Next

		



REM '======================Declaration of the output meters===================== 

REM '==========SET RWALL AND LWALL POS==========
	REM LWall.px.value 		= 0
	REM LWall.py.value 		= -H_WALL/2
	REM RWall.px.value 					= W_ARENA 			'width of arena
	REM RWall.py.value 					= LWall.py.value
REM 'where simulation values are tracked
	
	REM dim oscid as integer 
	REM oscid =  RWallMeasure.id
	REM dim loscid as integer
	REM loscid = WallOscillator.id
	REM rid = RWall.id
	REM lid = LWall.id
	REM Set Meter1=Doc.NewOutput()
    REM Meter1.Format="Graph"
    REM Meter1.x=700
    REM Meter1.Y=10
    REM Meter1.width=300
	REM Meter1.Column(1).label="Tension |F.x|"
	REM meter1.column(2).label="Rwall x position"
	REM meter1.column(3).label="Lwall y position"
    REM Meter1.Column(1).Cell.Formula="-constraintforce("+LTrim$(str$(oscid))+").x"
	REM meter1.column(2).cell.formula = "(Body["+str$(rid)+"].p.x - Body["+str$(lid)+"].p.x)" 'rwall position
	REM meter1.column(3).cell.formula = "(Constraint["+str$(loscid)+"].dp.x)-"+str$(walloscLen)
	REM Meter1.column(1).autoscale = false
	REM meter1.column(1).max = 40
	REM meter1.column(1).min = -40


    REM 'set meter1.show = SHOW_METERS
	

	
	REM Set Meter2=Doc.NewOutput()
    REM Meter2.Format="Graph"
    REM Meter2.x=700
    REM Meter2.Y=525
    REM Meter2.width=300
	
    REM Meter2.Column(1).label="Osc Tension"
	REM Meter2.Column(2).label="gamma"
	REM Meter2.Column(3).label="sigma"
	REM meter2.column(4).label="freq"

	REM 'mass of wall + 2*grabber_amt*mass_grab since there are grabberamt of horiz grabbers and grabberamt of vertical grabbers
	REM 'Meter2.Column(1).Cell.Formula="constraintforce("+LTrim$(str$(loscid))+").x + "+str$((M_WALL+2*GRABBER_AMT*M_Grab)*wall_freq)+"*sin("+str$(wall_freq)+"*t)"
	
	REM Meter2.Column(1).Cell.Formula="constraintforce("+LTrim$(str$(loscid))+").x"
	REM meter2.column(2).cell.formula = "(Body["+str$(lid)+"].p.y)/(Body["+str$(rid)_
	REM & "].p.x - Body["+str$(lid)+"].p.x - " _
	REM & str$(2*W_WALL)+")"
	REM meter2.column(3).cell.formula ="constraintforce("+str$(loscid)+").x/("+str$(H_OARENA)_
	REM & "*(Body["+str$(rid)+"].p.x - Body["+str$(lid)+"].p.x -"+ str$(2*W_WALL)+"))"
	REM meter2.column(4).cell.formula = oscFieldFormula
	


	REM 'AREA = (H_OARENA)*(RWall.px.value - LWall.px.value - W_Wall)
	REM 'sigma = "constraintforce("+LTrim$(str$(loscid))+").x/("+str$(H_OARENA)_
	REM '&"*( Body["+str$(rid)+"].p.x - Body["+str$(lid)+"].p.x" _
	REM '& str$(2*W_WALL))+")
	
	REM 'sigma
	REM 'Meter2.column(1).autoscale = false
	REM 'meter2.column(1).max = 10
	REM 'meter2.column(1).min = -10

'============================EXPORT STUFF===================================
	gosub ExportMedia
Exit function

'%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%SUBS%%%%%%%%%%%%%%%%%%%%%%%%%%%
'#############################################
CreateWallsAndGrabbers:

	set BWall			= doc.newbody("rectangle")
	BWall.name 			= "Bottom Wall"
	BWall.px.value		= 0
	BWall.py.value		= 0
	BWall.height.value	= .1
	BWall.width.value	= .6
	BWall.kineticfriction.value		= FRICTION
	BWall.StaticFriction.value		= FRICTION
	BWall.elasticity.value			= ELAST
	
	Set bWallpt			= doc.newpoint("anchor")
	Set bWallpt.body	= BWall
	return

listFiles:
	'filenames = My.Computer.FileSystem.GetFiles("D:\wkMdl_scripts\Output\", FileIO.SearchOption.SearchTopLevelOnly, "*.txt")
	dim maxnum as integer
	Dim res as String
	'For Each fileName in fileNames
	
	'GET FILE NUMBERS IN DIRECTORY!
	Dim fl()
	FileList fl,"D:\wkMdl_scripts\Output\data*.txt"
	ArraySort fl
	maxnum =ubound(fl)+1
	
return		
ExportMedia:
	while runNumber <= runTotal
		doc.run FRAMES
		if EXPORT = 1 then
			doc.reset
			doc.SelectAll False
			Doc.Select Meter1
			Doc.ExportStartFrame = 0
			Doc.ExportStopFrame = FRAMES
			gosub listFiles
			outputFile = LTrim$("A:\CrawlingSmarticleOut\data" &str$(maxnum) &".txt")
			wmFile = LTrim$("A:\CrawlingSmarticleOut\wm"& str$(maxnum) &".wm")
			Doc.ExportMeterData outputFile
			Doc.SaveAs wmFile, True

			if Motors_on then
				mout = 1
			else
				mout = 0
			end if
			
			if lparts then
				lout = 1
			else
				lout = 0
			end if
			Open outputFile For Append Access Write As #1
			writeString = "mass" & Chr(9) &str$(lwallmass) &_
			Chr(9)& "waittime" & Chr(9)&str$(waittime/spf)&_
			Chr(9)& "woarena"& Chr(9) &str$(W_OARENA) & Chr(9)& "h_oarena"& Chr(9) &str$(h_oarena) &_
			chr(9)& "wall_percent" & Chr(9) & str$(wallpercent) &_
			chr(9)& "wallfreq" & Chr(9) & str$(wall_freq) &_
			chr(9)& "1" & Chr(9) &str$(1) &_
			chr(9)& "amp_max" & Chr(9) &str$(amp_max) &_
			chr(9)& "spring_b" & Chr(9) &str$(spring_b)&_
			chr(9)& "spring_k" & Chr(9) &str$(spring_k)&_
			chr(9)& "MOTORS_ON" & Chr(9) &str$(mout)&_
			chr(9)& "lparts" & Chr(9) &str$(lout)
			write #1, writestring
			
			close
			doc.reset	
		end if
		RunNumber = RunNumber+1
		
	wend
	return


ConnectLRBarbCircles:
	Set LBarbCircleJt(j).point(1).body			= LBarbCircle(j)
	Set LBarbCircleJt(j).point(2).body			= LBarb(j)
	Set LBarbCircleJt(j).point(2).px.value		= 0
	Set LBarbCircleJt(j).point(2).py.value		= LBarb(j).height.value/2
	Set LBarbCircleJt(j).show					= SHOW_DETAILS
	LBarbCircleJt(j).name						= "LBarbCircleJt("+LTrim$(str$(j))+")"
'	Doc.select LBarb(j), true
'	Doc.select LBarbCircle(j), true
'	Doc.Collide False
'	Doc.selectall false
	
	'rbarb circle
	'========always sets these parameters 
	if lparts then 
		Set RBarbCircleJt(j).point(1).body			= RBarbCircle(j)
		Set	RBarbCircleJt(j).point(2).body			= UBott(j)
		Set	RBarbCircleJt(j).point(2).px.value		= W_UBOTT/2
		Set	RBarbCircleJt(j).point(2).py.value		= 0
		Set	RBarbCircleJt(j).show					= SHOW_DETAILS 
		RBarbCircleJt(j).name						= "RBarbCircleJt("+LTrim$(str$(j))+")"
	else
		Set RBarbCircleJt(j).point(1).body			= RBarbCircle(j)
		Set	RBarbCircleJt(j).point(2).body			= RBarb(j)
		Set	RBarbCircleJt(j).point(2).px.value		= 0
		Set	RBarbCircleJt(j).point(2).py.value		= RBarb(j).height.value/2
		Set	RBarbCircleJt(j).show					= SHOW_DETAILS
		RBarbCircleJt(j).name						= "RBarbCircleJt("+LTrim$(str$(j))+")"
	end if



	return


Make_frame_array:
	'stepspd = .5
	'stepAMT=4
	'waitframes = 50
	VConstMoveFrames = fix(WALL_MOVE_DISTANCE*W_OARENA*(1/SPF)/RWall_spd)
	StepStart = fix(.7*VConstMoveFrames) 'percent of distance to go fullspeed for
	
	stepD = fix((VConstMoveFrames-StepStart)*(RWall_Spd/stepSpd)/(stepAmt)) 'gives me frame amount for steps (x2 since half are steps half 0)
	stepCount = 0
	waitCount = 0
	totalSteps = 0
	for i = 1 to frames
		if i < StepStart then
			timestepMove(i) = RWall_spd
			totalSteps = totalSteps+1
		else
			'msgbox(totalSteps)
			if totalSteps = VConstMoveFrames then
				timestepMove(i) = 0
			else
				if StepCount < stepD then
					timestepMove(i) = RWall_spd
					stepCount = stepCount+1
					totalSteps = totalSteps+1
				elseif stepCount = stepD then
					timestepMove(i) = 0
					waitcount = waitCount+1
					if waitcount = waitframes then
						stepCount = 0
						waitCount = 0
					end if
				end if
			end if
		end if		
	next
	'msgbox("totalSteps:"+str$(totalSteps)+"constwallmoveframeend:"+str$(VConstMoveFrames)+" StepStart:" + str$(StepStart)+" stepD:" + str$(stepD))
	return


End function

'******************DEPRECATED CODE************************
'=======old only motor and barb config no springs===========
'		Set LMotor(j).Point(1).Body = LBarb(j)
'		Set LMotor(j).Point(2).Body = UBott(j)
'		Set RMotor(j).Point(1).Body = RBarb(j)
'		Set RMotor(j).Point(2).Body = UBott(j)
'		
'		LMotor(j).Point(1).px.value=0
'		LMotor(j).Point(1).py.value=-(H_BARB-H_UBOTT)/2
'		LMotor(j).Point(2).px.value=(W_Barb-W_UBOTT)/2
'		LMotor(j).Point(2).py.value=0
'		
'		RMotor(j).Point(1).px.value=0
'		RMotor(j).Point(1).py.value=-(H_BARB-H_UBOTT)/2
'		RMotor(j).Point(2).px.value=-(W_Barb-W_UBOTT)/2
'		RMotor(j).Point(2).py.value=0